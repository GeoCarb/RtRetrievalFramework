# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _tccon_apriori.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_tccon_apriori', [dirname(__file__)])
        except ImportError:
            import _tccon_apriori
            return _tccon_apriori
        if fp is not None:
            try:
                _mod = imp.load_module('_tccon_apriori', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _tccon_apriori = swig_import_helper()
    del swig_import_helper
else:
    import _tccon_apriori
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _tccon_apriori.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
import full_physics_swig.state_vector
class TcconApriori(full_physics_swig.generic_object.GenericObject):
    """
    This class is used to calculate a CO2 apriori using the same method
    TCCON does.

    C++ includes: tccon_apriori.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        TcconApriori::TcconApriori(const boost::shared_ptr< Level1b > &L1b_file, const
        boost::shared_ptr< Pressure > &Pressure, const boost::shared_ptr<
        Temperature > &Temp, double Co2_ref=0.000380, const Time
        &Ref_time=Time::parse_time("2005-01-01T00:00:00Z"), DoubleWithUnit
        Rate_increase=DoubleWithUnit(0.005,"year^-1"), DoubleWithUnit
        Age_air_pbl=DoubleWithUnit(0.2,"year"), DoubleWithUnit
        Age_air_tropopause=DoubleWithUnit(0.4,"year"), DoubleWithUnit
        Age_air_upper_stratosphere=DoubleWithUnit(5.5,"year"))

        """
        _tccon_apriori.TcconApriori_swiginit(self,_tccon_apriori.new_TcconApriori(*args))
    def co2_vmr(self, *args):
        """
        double TcconApriori::co2_vmr(double P) const
        Return the CO2 volume mixing ratio for the given pressure level.

        The pressure should be in Pascals. 
        """
        return _tccon_apriori.TcconApriori_co2_vmr(self, *args)

    def co2_vmr_grid(self, *args):
        """
        blitz::Array< double, 1 > TcconApriori::co2_vmr_grid(const Pressure &P) const
        Return CO2 VMR for each pressure in the given pressure grid. 
        """
        return _tccon_apriori.TcconApriori_co2_vmr_grid(self, *args)

    __swig_destroy__ = _tccon_apriori.delete_TcconApriori
TcconApriori.co2_vmr = new_instancemethod(_tccon_apriori.TcconApriori_co2_vmr,None,TcconApriori)
TcconApriori.co2_vmr_grid = new_instancemethod(_tccon_apriori.TcconApriori_co2_vmr_grid,None,TcconApriori)
TcconApriori.__str__ = new_instancemethod(_tccon_apriori.TcconApriori___str__,None,TcconApriori)
TcconApriori_swigregister = _tccon_apriori.TcconApriori_swigregister
TcconApriori_swigregister(TcconApriori)



