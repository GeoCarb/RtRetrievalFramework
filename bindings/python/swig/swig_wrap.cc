#include <Python.h>
#include <iostream>
#include "swig_type_mapper_base.h"

using namespace FullPhysics;
// Map used between type_index and object to map this to python.
std::map<type_index, boost::shared_ptr<SwigTypeMapperBase> > 
  FullPhysics::swig_type_map;

extern "C" {
  void init_swig_wrap(void);
  void init_fp_exception(void);
  void init_generic_object(void);
  void init_unit(void);
  void init_double_with_unit(void);
  void init_constant(void);
  void init_default_constant(void);
  void init_array_with_unit(void);
  void init_auto_derivative(void);
  void init_auto_derivative_with_unit(void);
  void init_array_ad(void);
  void init_array_ad_with_unit(void);
  void init_spectral_domain(void);
  void init_logger(void);
  void init_fp_time(void);
  void init_heritage_file(void);
  void init_linear_algebra(void);
  void init_rayleigh_greek_moment(void);
  void init_hdf_file(void);
  void init_hdf_sounding_id(void);
  void init_acos_sounding_id(void);
  void init_oco_sounding_id(void);
  void init_ecmwf(void);
  void init_acos_ecmwf(void);
  void init_oco_ecmwf(void);
  void init_oco_sim_met_ecmwf(void);
  void init_observer(void);
  void init_fts_run_log(void);
  void init_spectral_range(void);
  void init_spectral_bound(void);
  void init_spectrum(void);
  void init_named_spectrum(void);
  void init_state_vector(void);
  void init_sub_state_vector_array(void);
  void init_sub_state_vector_proxy(void);
  void init_hdf_file_generating(void);
  void init_closest_point(void);
  void init_polynomial_eval(void);
  void init_linear_interpolate(void);
  void init_solar_absorption_spectrum(void);
  void init_solar_continuum_spectrum(void);
  void init_solar_doppler_shift(void);
  void init_spectrum_effect(void);
  void init_solar_model(void);
  void init_instrument(void);
  void init_ils(void);
  void init_ils_function(void);
  void init_instrument_correction(void);
  void init_spectrum_effect_imp_base(void);
  void init_dispersion(void);
  void init_initial_guess(void);
  void init_composite_initial_guess(void);
  void init_perturbation(void);
  void init_cost_function(void);
  void init_convergence_check(void);
  void init_level_1b(void);
  void init_noise_model(void);
  void init_level_1b_hdf(void);
  void init_spectrum_sampling(void);
  void init_forward_model(void);
  void init_forward_model_spectral_grid(void);
  void init_output(void);
  void init_spectral_window(void);
  void init_pressure(void);
  void init_stokes_coefficient(void);
  void init_pressure_imp_base(void);
  void init_stokes_coefficient_imp_base(void);
  void init_gas_absorption(void);
  void init_temperature(void);
  void init_temperature_imp_base(void);
  void init_temperature_offset(void);
  void init_altitude(void);
  void init_absorber_vmr(void);
  void init_absorber_vmr_imp_base(void);
  void init_absorber_vmr_scaled(void);
  void init_absorber(void);
  void init_ground(void);
  void init_rt_atmosphere(void);
  void init_radiative_transfer(void);
  void init_radiative_transfer_retrievable(void);
  void init_radiative_transfer_imp_base(void);
  void init_radiative_transfer_fixed_stokes_coefficient(void);
  void init_radiative_transfer_single_wn(void);
  void init_spurr_rt(void);
  void init_hres_wrapper(void);
  void init_spurr_driver(void);
  void init_aerosol_property(void);
  void init_aerosol_extinction(void);
  void init_aerosol_extinction_imp_base(void);
  void init_cost_func(void);
  void init_cost_func_diff(void);
  void init_nlls_problem(void);
  void init_problem_state(void);
  void init_cost_func_state(void);
  void init_cost_func_diff_state(void);
  void init_nlls_problem_state(void);
  void init_model_state(void);
  void init_iterative_solver(void);
  void init_iterative_solver_der(void);
  void init_nlls_solver(void);
  void init_cost_minimizer(void);
  void init_model_measure(void);
  void init_max_likelihood(void);
  void init_max_a_posteriori(void);
  void init_pressure_holder(void);
  void init_aerosol_property_hdf(void);
  void init_hdf_constant(void);
  void init_solar_continuum_table(void);
  void init_solar_absorption_table(void);
  void init_solar_doppler_shift_polynomial(void);
  void init_solar_doppler_shift_l1b(void);
  void init_solar_absorption_and_continuum(void);
  void init_bad_sample_noise_model(void);
  void init_composite_perturbation(void);
  void init_dispersion_polynomial(void);
  void init_ils_table(void);
  void init_ils_gaussian(void);
  void init_ils_convolution(void);
  void init_ils_instrument(void);
  void init_zero_offset_waveform(void);
  void init_empirical_orthogonal_function(void);
  void init_radiance_scaling(void);
  void init_radiance_scaling_sv_fit(void);
  void init_radiance_scaling_linear_fit(void);
  void init_level_1b_fts(void);
  void init_ils_fts(void);
  void init_level_1b_heritage(void);
  void init_level_1b_acos(void);
  void init_level_1b_average(void);
  void init_level_1b_oco(void);
  void init_level_1b_cache(void);
  void init_gosat_noise_model(void);
  void init_precomputed_noise_model(void);
  void init_absco(void);
  void init_absco_hdf(void);
  void init_altitude_hydrostatic(void);
  void init_absorber_absco(void);
  void init_ground_lambertian(void);
  void init_ground_coxmunk(void);
  void init_ground_coxmunk_plus_lambertian(void);
  void init_initial_guess_value(void);
  void init_aerosol(void);
  void init_merra_aerosol(void);
  void init_rayleigh(void);
  void init_atmosphere_oco(void);
  void init_connor_solver(void);
  void init_log_timing(void);
  void init_chisq_convergence(void);
  void init_connor_convergence(void);
  void init_solver_iteration_log(void);
  void init_forward_model_cost_function(void);
  void init_error_analysis(void);
  void init_oco_forward_model(void);
  void init_output_hdf(void);
  void init_uniform_spectrum_sampling(void);
  void init_spectrum_sampling_fixed_spacing(void);
  void init_fp_logger(void);
  void init_lidort_interface_types(void);
  void init_lidort_interface_masters(void);
  void init_lidort_driver(void);
  void init_lidort_rt(void);
  void init_twostream_interface(void);
  void init_twostream_driver(void);
  void init_twostream_rt(void);
  void init_l_rad_driver(void);
  void init_l_rad_rt(void);
  void init_lsi_rt(void);
  void init_fm_nlls_problem(void);
  void init_aerosol_extinction_linear(void);
  void init_aerosol_extinction_log(void);
  void init_aerosol_shape_gaussian(void);
  void init_l2_fp_configuration(void);
  void init_l2_fp_configuration_lua(void);
  void init_nonuniform_spectrum_sampling(void);
  void init_spectral_window_range(void);
  void init_temperature_ecmwf(void);
  void init_absorber_vmr_ecmwf(void);
  void init_absorber_vmr_level(void);
  void init_absorber_vmr_level_scaled(void);
  void init_pressure_sigma(void);
  void init_stokes_coefficient_constant(void);
  void init_stokes_coefficient_fraction(void);
  void init_tccon_apriori(void);
  void init_oco_sim_apriori(void);
  void init_dispersion_fit(void);
  void init_fluorescence_effect(void);
  void init_solar_absorption_gfit_file(void);
  void init_nlls_solver_gsl(void);
  void init_nlls_solver_gsl_lmsder(void);
  void init_nlls_solver_gsl_lmder(void);
  void init_cost_minimizer_gsl(void);
  void init_model_measure_oco(void);
  void init_max_likelihood_oco(void);
  void init_max_a_posteriori_oco(void);
  void init_connor_solver_map(void);
  void init_nlls_max_likelihood(void);
  void init_nlls_max_a_posteriori(void);
  void init_nlls_problem_scaled(void);
  void init_pressure_level_input(void);
  void init_pressure_fixed_level(void);
  void init_temperature_fixed_level(void);
  void init_absorber_vmr_fixed_level(void);
  void init_absorber_vmr_fixed_level_scaled(void);
  void init_solar_continuum_polynomial(void);
  void init_solar_absorption_oco_file(void);
  void init_register_output_base(void);
  void init_dispersion_polynomial_output(void);
  void init_stokes_coefficient_fraction_output(void);
  void init_zero_offset_waveform_output(void);
  void init_empirical_orthogonal_function_output(void);
  void init_level_1b_output(void);
  void init_state_vector_output(void);
  void init_forward_model_output(void);
  void init_oco_forward_model_output(void);
  void init_connor_convergence_output(void);
  void init_connor_solver_output(void);
  void init_error_analysis_output(void);
  void init_dispersion_fit_output(void);
  void init_max_a_posteriori_output(void);
  void init_fluorescence_effect_output(void);
  void init_radiance_scaling_output(void);
  void init_lua_state(void);
  void init_luabind_object(void);
  void init_swig_std(void);
  void init_swig_array(void);
  void init_swig_rational(void);
}

// Used throughout SWIG wrapper, define here because it is convenient.
std::string parse_python_exception() {
  PyObject *type = NULL, *value = NULL, *tb = NULL;
  PyErr_Fetch(&type, &value, &tb);
  PyObject* mod = PyImport_ImportModule("traceback");
  PyObject* err_str_list = PyObject_CallMethodObjArgs(mod,
		 PyString_FromString("format_exception"), type, value, tb, NULL);
  std::string ret = "Python error that I can't parse";
  if(err_str_list) {
    PyObject* err_str = 
      PyObject_CallMethodObjArgs(PyString_FromString(""),
				 PyString_FromString("join"), 
				 err_str_list, NULL);
    if(err_str)
      ret = PyString_AsString(err_str);
    Py_XDECREF(err_str);
  } else if(value) {
    ret = PyString_AsString(value);
  }
  Py_XDECREF(mod);
  Py_XDECREF(err_str_list);
  Py_XDECREF(type);
  Py_XDECREF(value);
  Py_XDECREF(tb);
  return ret;
}

static void init_extension_module(PyObject* package, const char *modulename,
				  void (*initfunction)(void)) {
  PyObject *module = PyImport_AddModule((char *)modulename);
  if(!module) {
    std::cerr << "Initialisation in PyImport_AddModule failed for module "
	      << modulename << "\n";
    return;
  }
  if(PyModule_AddObject(package, (char *)modulename, module)) {
    std::cerr << "Initialisation in PyImport_AddObject failed for module "
	      << modulename << "\n";
    return;
  }
  Py_INCREF(module);
  initfunction();
}

void init_swig_wrap(void) 
{
  // Initialise this module
  PyObject* module = Py_InitModule("_swig_wrap", NULL); // NULL only
  if(!module) {
    std::cerr << "Initialization failed\n";
    return;
  }

  PyObject *package = PyImport_AddModule((char *)"new_full_physics");
  if(!package) {
    std::cerr << "Initialization failed\n";
    return;
  }
  
  init_extension_module(package, "_fp_exception", init_fp_exception);
  init_extension_module(package, "_generic_object", init_generic_object);
  init_extension_module(package, "_unit", init_unit);
  init_extension_module(package, "_double_with_unit", init_double_with_unit);
  init_extension_module(package, "_constant", init_constant);
  init_extension_module(package, "_default_constant", init_default_constant);
  init_extension_module(package, "_array_with_unit", init_array_with_unit);
  init_extension_module(package, "_auto_derivative", init_auto_derivative);
  init_extension_module(package, "_auto_derivative_with_unit", init_auto_derivative_with_unit);
  init_extension_module(package, "_array_ad", init_array_ad);
  init_extension_module(package, "_array_ad_with_unit", init_array_ad_with_unit);
  init_extension_module(package, "_spectral_domain", init_spectral_domain);
  init_extension_module(package, "_logger", init_logger);
  init_extension_module(package, "_fp_time", init_fp_time);
  init_extension_module(package, "_heritage_file", init_heritage_file);
  init_extension_module(package, "_linear_algebra", init_linear_algebra);
  init_extension_module(package, "_rayleigh_greek_moment", init_rayleigh_greek_moment);
  init_extension_module(package, "_hdf_file", init_hdf_file);
  init_extension_module(package, "_hdf_sounding_id", init_hdf_sounding_id);
  init_extension_module(package, "_acos_sounding_id", init_acos_sounding_id);
  init_extension_module(package, "_oco_sounding_id", init_oco_sounding_id);
  init_extension_module(package, "_ecmwf", init_ecmwf);
  init_extension_module(package, "_acos_ecmwf", init_acos_ecmwf);
  init_extension_module(package, "_oco_ecmwf", init_oco_ecmwf);
  init_extension_module(package, "_oco_sim_met_ecmwf", init_oco_sim_met_ecmwf);
  init_extension_module(package, "_observer", init_observer);
  init_extension_module(package, "_fts_run_log", init_fts_run_log);
  init_extension_module(package, "_spectral_range", init_spectral_range);
  init_extension_module(package, "_spectral_bound", init_spectral_bound);
  init_extension_module(package, "_spectrum", init_spectrum);
  init_extension_module(package, "_named_spectrum", init_named_spectrum);
  init_extension_module(package, "_state_vector", init_state_vector);
  init_extension_module(package, "_sub_state_vector_array", init_sub_state_vector_array);
  init_extension_module(package, "_sub_state_vector_proxy", init_sub_state_vector_proxy);
  init_extension_module(package, "_hdf_file_generating", init_hdf_file_generating);
  init_extension_module(package, "_closest_point", init_closest_point);
  init_extension_module(package, "_polynomial_eval", init_polynomial_eval);
  init_extension_module(package, "_linear_interpolate", init_linear_interpolate);
  init_extension_module(package, "_solar_absorption_spectrum", init_solar_absorption_spectrum);
  init_extension_module(package, "_solar_continuum_spectrum", init_solar_continuum_spectrum);
  init_extension_module(package, "_solar_doppler_shift", init_solar_doppler_shift);
  init_extension_module(package, "_spectrum_effect", init_spectrum_effect);
  init_extension_module(package, "_solar_model", init_solar_model);
  init_extension_module(package, "_instrument", init_instrument);
  init_extension_module(package, "_ils", init_ils);
  init_extension_module(package, "_ils_function", init_ils_function);
  init_extension_module(package, "_instrument_correction", init_instrument_correction);
  init_extension_module(package, "_spectrum_effect_imp_base", init_spectrum_effect_imp_base);
  init_extension_module(package, "_dispersion", init_dispersion);
  init_extension_module(package, "_initial_guess", init_initial_guess);
  init_extension_module(package, "_composite_initial_guess", init_composite_initial_guess);
  init_extension_module(package, "_perturbation", init_perturbation);
  init_extension_module(package, "_cost_function", init_cost_function);
  init_extension_module(package, "_convergence_check", init_convergence_check);
  init_extension_module(package, "_level_1b", init_level_1b);
  init_extension_module(package, "_noise_model", init_noise_model);
  init_extension_module(package, "_level_1b_hdf", init_level_1b_hdf);
  init_extension_module(package, "_spectrum_sampling", init_spectrum_sampling);
  init_extension_module(package, "_forward_model", init_forward_model);
  init_extension_module(package, "_forward_model_spectral_grid", init_forward_model_spectral_grid);
  init_extension_module(package, "_output", init_output);
  init_extension_module(package, "_spectral_window", init_spectral_window);
  init_extension_module(package, "_pressure", init_pressure);
  init_extension_module(package, "_stokes_coefficient", init_stokes_coefficient);
  init_extension_module(package, "_pressure_imp_base", init_pressure_imp_base);
  init_extension_module(package, "_stokes_coefficient_imp_base", init_stokes_coefficient_imp_base);
  init_extension_module(package, "_gas_absorption", init_gas_absorption);
  init_extension_module(package, "_temperature", init_temperature);
  init_extension_module(package, "_temperature_imp_base", init_temperature_imp_base);
  init_extension_module(package, "_temperature_offset", init_temperature_offset);
  init_extension_module(package, "_altitude", init_altitude);
  init_extension_module(package, "_absorber_vmr", init_absorber_vmr);
  init_extension_module(package, "_absorber_vmr_imp_base", init_absorber_vmr_imp_base);
  init_extension_module(package, "_absorber_vmr_scaled", init_absorber_vmr_scaled);
  init_extension_module(package, "_absorber", init_absorber);
  init_extension_module(package, "_ground", init_ground);
  init_extension_module(package, "_rt_atmosphere", init_rt_atmosphere);
  init_extension_module(package, "_radiative_transfer", init_radiative_transfer);
  init_extension_module(package, "_radiative_transfer_retrievable", init_radiative_transfer_retrievable);
  init_extension_module(package, "_radiative_transfer_imp_base", init_radiative_transfer_imp_base);
  init_extension_module(package, "_radiative_transfer_fixed_stokes_coefficient", init_radiative_transfer_fixed_stokes_coefficient);
  init_extension_module(package, "_radiative_transfer_single_wn", init_radiative_transfer_single_wn);
  init_extension_module(package, "_spurr_rt", init_spurr_rt);
  init_extension_module(package, "_hres_wrapper", init_hres_wrapper);
  init_extension_module(package, "_spurr_driver", init_spurr_driver);
  init_extension_module(package, "_aerosol_property", init_aerosol_property);
  init_extension_module(package, "_aerosol_extinction", init_aerosol_extinction);
  init_extension_module(package, "_aerosol_extinction_imp_base", init_aerosol_extinction_imp_base);
  init_extension_module(package, "_cost_func", init_cost_func);
  init_extension_module(package, "_cost_func_diff", init_cost_func_diff);
  init_extension_module(package, "_nlls_problem", init_nlls_problem);
  init_extension_module(package, "_problem_state", init_problem_state);
  init_extension_module(package, "_cost_func_state", init_cost_func_state);
  init_extension_module(package, "_cost_func_diff_state", init_cost_func_diff_state);
  init_extension_module(package, "_nlls_problem_state", init_nlls_problem_state);
  init_extension_module(package, "_model_state", init_model_state);
  init_extension_module(package, "_iterative_solver", init_iterative_solver);
  init_extension_module(package, "_iterative_solver_der", init_iterative_solver_der);
  init_extension_module(package, "_nlls_solver", init_nlls_solver);
  init_extension_module(package, "_cost_minimizer", init_cost_minimizer);
  init_extension_module(package, "_model_measure", init_model_measure);
  init_extension_module(package, "_max_likelihood", init_max_likelihood);
  init_extension_module(package, "_max_a_posteriori", init_max_a_posteriori);
  init_extension_module(package, "_pressure_holder", init_pressure_holder);
  init_extension_module(package, "_aerosol_property_hdf", init_aerosol_property_hdf);
  init_extension_module(package, "_hdf_constant", init_hdf_constant);
  init_extension_module(package, "_solar_continuum_table", init_solar_continuum_table);
  init_extension_module(package, "_solar_absorption_table", init_solar_absorption_table);
  init_extension_module(package, "_solar_doppler_shift_polynomial", init_solar_doppler_shift_polynomial);
  init_extension_module(package, "_solar_doppler_shift_l1b", init_solar_doppler_shift_l1b);
  init_extension_module(package, "_solar_absorption_and_continuum", init_solar_absorption_and_continuum);
  init_extension_module(package, "_bad_sample_noise_model", init_bad_sample_noise_model);
  init_extension_module(package, "_composite_perturbation", init_composite_perturbation);
  init_extension_module(package, "_dispersion_polynomial", init_dispersion_polynomial);
  init_extension_module(package, "_ils_table", init_ils_table);
  init_extension_module(package, "_ils_gaussian", init_ils_gaussian);
  init_extension_module(package, "_ils_convolution", init_ils_convolution);
  init_extension_module(package, "_ils_instrument", init_ils_instrument);
  init_extension_module(package, "_zero_offset_waveform", init_zero_offset_waveform);
  init_extension_module(package, "_empirical_orthogonal_function", init_empirical_orthogonal_function);
  init_extension_module(package, "_radiance_scaling", init_radiance_scaling);
  init_extension_module(package, "_radiance_scaling_sv_fit", init_radiance_scaling_sv_fit);
  init_extension_module(package, "_radiance_scaling_linear_fit", init_radiance_scaling_linear_fit);
  init_extension_module(package, "_level_1b_fts", init_level_1b_fts);
  init_extension_module(package, "_ils_fts", init_ils_fts);
  init_extension_module(package, "_level_1b_heritage", init_level_1b_heritage);
  init_extension_module(package, "_level_1b_acos", init_level_1b_acos);
  init_extension_module(package, "_level_1b_average", init_level_1b_average);
  init_extension_module(package, "_level_1b_oco", init_level_1b_oco);
  init_extension_module(package, "_level_1b_cache", init_level_1b_cache);
  init_extension_module(package, "_gosat_noise_model", init_gosat_noise_model);
  init_extension_module(package, "_precomputed_noise_model", init_precomputed_noise_model);
  init_extension_module(package, "_absco", init_absco);
  init_extension_module(package, "_absco_hdf", init_absco_hdf);
  init_extension_module(package, "_altitude_hydrostatic", init_altitude_hydrostatic);
  init_extension_module(package, "_absorber_absco", init_absorber_absco);
  init_extension_module(package, "_ground_lambertian", init_ground_lambertian);
  init_extension_module(package, "_ground_coxmunk", init_ground_coxmunk);
  init_extension_module(package, "_ground_coxmunk_plus_lambertian", init_ground_coxmunk_plus_lambertian);
  init_extension_module(package, "_initial_guess_value", init_initial_guess_value);
  init_extension_module(package, "_aerosol", init_aerosol);
  init_extension_module(package, "_merra_aerosol", init_merra_aerosol);
  init_extension_module(package, "_rayleigh", init_rayleigh);
  init_extension_module(package, "_atmosphere_oco", init_atmosphere_oco);
  init_extension_module(package, "_connor_solver", init_connor_solver);
  init_extension_module(package, "_log_timing", init_log_timing);
  init_extension_module(package, "_chisq_convergence", init_chisq_convergence);
  init_extension_module(package, "_connor_convergence", init_connor_convergence);
  init_extension_module(package, "_solver_iteration_log", init_solver_iteration_log);
  init_extension_module(package, "_forward_model_cost_function", init_forward_model_cost_function);
  init_extension_module(package, "_error_analysis", init_error_analysis);
  init_extension_module(package, "_oco_forward_model", init_oco_forward_model);
  init_extension_module(package, "_output_hdf", init_output_hdf);
  init_extension_module(package, "_uniform_spectrum_sampling", init_uniform_spectrum_sampling);
  init_extension_module(package, "_spectrum_sampling_fixed_spacing", init_spectrum_sampling_fixed_spacing);
  init_extension_module(package, "_fp_logger", init_fp_logger);
  init_extension_module(package, "_lidort_interface_types", init_lidort_interface_types);
  init_extension_module(package, "_lidort_interface_masters", init_lidort_interface_masters);
  init_extension_module(package, "_lidort_driver", init_lidort_driver);
  init_extension_module(package, "_lidort_rt", init_lidort_rt);
  init_extension_module(package, "_twostream_interface", init_twostream_interface);
  init_extension_module(package, "_twostream_driver", init_twostream_driver);
  init_extension_module(package, "_twostream_rt", init_twostream_rt);
  init_extension_module(package, "_l_rad_driver", init_l_rad_driver);
  init_extension_module(package, "_l_rad_rt", init_l_rad_rt);
  init_extension_module(package, "_lsi_rt", init_lsi_rt);
  init_extension_module(package, "_fm_nlls_problem", init_fm_nlls_problem);
  init_extension_module(package, "_aerosol_extinction_linear", init_aerosol_extinction_linear);
  init_extension_module(package, "_aerosol_extinction_log", init_aerosol_extinction_log);
  init_extension_module(package, "_aerosol_shape_gaussian", init_aerosol_shape_gaussian);
  init_extension_module(package, "_l2_fp_configuration", init_l2_fp_configuration);
  init_extension_module(package, "_l2_fp_configuration_lua", init_l2_fp_configuration_lua);
  init_extension_module(package, "_nonuniform_spectrum_sampling", init_nonuniform_spectrum_sampling);
  init_extension_module(package, "_spectral_window_range", init_spectral_window_range);
  init_extension_module(package, "_temperature_ecmwf", init_temperature_ecmwf);
  init_extension_module(package, "_absorber_vmr_ecmwf", init_absorber_vmr_ecmwf);
  init_extension_module(package, "_absorber_vmr_level", init_absorber_vmr_level);
  init_extension_module(package, "_absorber_vmr_level_scaled", init_absorber_vmr_level_scaled);
  init_extension_module(package, "_pressure_sigma", init_pressure_sigma);
  init_extension_module(package, "_stokes_coefficient_constant", init_stokes_coefficient_constant);
  init_extension_module(package, "_stokes_coefficient_fraction", init_stokes_coefficient_fraction);
  init_extension_module(package, "_tccon_apriori", init_tccon_apriori);
  init_extension_module(package, "_oco_sim_apriori", init_oco_sim_apriori);
  init_extension_module(package, "_dispersion_fit", init_dispersion_fit);
  init_extension_module(package, "_fluorescence_effect", init_fluorescence_effect);
  init_extension_module(package, "_solar_absorption_gfit_file", init_solar_absorption_gfit_file);
  init_extension_module(package, "_nlls_solver_gsl", init_nlls_solver_gsl);
  init_extension_module(package, "_nlls_solver_gsl_lmsder", init_nlls_solver_gsl_lmsder);
  init_extension_module(package, "_nlls_solver_gsl_lmder", init_nlls_solver_gsl_lmder);
  init_extension_module(package, "_cost_minimizer_gsl", init_cost_minimizer_gsl);
  init_extension_module(package, "_model_measure_oco", init_model_measure_oco);
  init_extension_module(package, "_max_likelihood_oco", init_max_likelihood_oco);
  init_extension_module(package, "_max_a_posteriori_oco", init_max_a_posteriori_oco);
  init_extension_module(package, "_connor_solver_map", init_connor_solver_map);
  init_extension_module(package, "_nlls_max_likelihood", init_nlls_max_likelihood);
  init_extension_module(package, "_nlls_max_a_posteriori", init_nlls_max_a_posteriori);
  init_extension_module(package, "_nlls_problem_scaled", init_nlls_problem_scaled);
  init_extension_module(package, "_pressure_level_input", init_pressure_level_input);
  init_extension_module(package, "_pressure_fixed_level", init_pressure_fixed_level);
  init_extension_module(package, "_temperature_fixed_level", init_temperature_fixed_level);
  init_extension_module(package, "_absorber_vmr_fixed_level", init_absorber_vmr_fixed_level);
  init_extension_module(package, "_absorber_vmr_fixed_level_scaled", init_absorber_vmr_fixed_level_scaled);
  init_extension_module(package, "_solar_continuum_polynomial", init_solar_continuum_polynomial);
  init_extension_module(package, "_solar_absorption_oco_file", init_solar_absorption_oco_file);
  init_extension_module(package, "_register_output_base", init_register_output_base);
  init_extension_module(package, "_dispersion_polynomial_output", init_dispersion_polynomial_output);
  init_extension_module(package, "_stokes_coefficient_fraction_output", init_stokes_coefficient_fraction_output);
  init_extension_module(package, "_zero_offset_waveform_output", init_zero_offset_waveform_output);
  init_extension_module(package, "_empirical_orthogonal_function_output", init_empirical_orthogonal_function_output);
  init_extension_module(package, "_level_1b_output", init_level_1b_output);
  init_extension_module(package, "_state_vector_output", init_state_vector_output);
  init_extension_module(package, "_forward_model_output", init_forward_model_output);
  init_extension_module(package, "_oco_forward_model_output", init_oco_forward_model_output);
  init_extension_module(package, "_connor_convergence_output", init_connor_convergence_output);
  init_extension_module(package, "_connor_solver_output", init_connor_solver_output);
  init_extension_module(package, "_error_analysis_output", init_error_analysis_output);
  init_extension_module(package, "_dispersion_fit_output", init_dispersion_fit_output);
  init_extension_module(package, "_max_a_posteriori_output", init_max_a_posteriori_output);
  init_extension_module(package, "_fluorescence_effect_output", init_fluorescence_effect_output);
  init_extension_module(package, "_radiance_scaling_output", init_radiance_scaling_output);
  init_extension_module(package, "_lua_state", init_lua_state);
  init_extension_module(package, "_luabind_object", init_luabind_object);
  init_extension_module(package, "_swig_std", init_swig_std);
  init_extension_module(package, "_swig_array", init_swig_array);
  init_extension_module(package, "_swig_rational", init_swig_rational);
}
