# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _array_with_unit.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_array_with_unit', [dirname(__file__)])
        except ImportError:
            import _array_with_unit
            return _array_with_unit
        if fp is not None:
            try:
                _mod = imp.load_module('_array_with_unit', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _array_with_unit = swig_import_helper()
    del swig_import_helper
else:
    import _array_with_unit
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _array_with_unit.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.generic_object
class ArrayWithUnit_double_1(full_physics_swig.generic_object.GenericObject):
    """
    We frequently have a array of numbers with units associated with them.

    This is a simple structure that just keeps these two things together.

    C++ includes: array_with_unit.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        FullPhysics::ArrayWithUnit< T, D >::ArrayWithUnit(const blitz::Array< T, D > &Value, const std::string
        &Value_units_name)

        """
        _array_with_unit.ArrayWithUnit_double_1_swiginit(self,_array_with_unit.new_ArrayWithUnit_double_1(*args))
    def convert(self, *args):
        """
        ArrayWithUnit<T, D> FullPhysics::ArrayWithUnit< T, D >::convert(const Unit &R) const
        Convert to the given units. 
        """
        return _array_with_unit.ArrayWithUnit_double_1_convert(self, *args)

    def convert_wave(self, *args):
        """
        ArrayWithUnit<T,D> FullPhysics::ArrayWithUnit< T, D >::convert_wave(const Unit &R) const
        We often need to handle conversion from wavenumber to/from wavelength.

        This is either a normal conversion of the units before and after match
        in the power of length (so cm^-1 to m^-1), or do an inversion. Since
        we do this often enough, it is worth having a function that handles
        this logic. 
        """
        return _array_with_unit.ArrayWithUnit_double_1_convert_wave(self, *args)

    def _v_rows(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::rows() const

        """
        return _array_with_unit.ArrayWithUnit_double_1__v_rows(self)

    @property
    def rows(self):
        return self._v_rows()

    def _v_cols(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::cols() const

        """
        return _array_with_unit.ArrayWithUnit_double_1__v_cols(self)

    @property
    def cols(self):
        return self._v_cols()

    def _v_depth(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::depth() const

        """
        return _array_with_unit.ArrayWithUnit_double_1__v_depth(self)

    @property
    def depth(self):
        return self._v_depth()

    @property
    def value(self):    
      return self._value()

    @value.setter
    def value(self,v):
      self._value(v)

    @property
    def units(self):    
      return self._units()

    @units.setter
    def units(self,v):
      self._units(v)
      
    __swig_destroy__ = _array_with_unit.delete_ArrayWithUnit_double_1
ArrayWithUnit_double_1._value = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1__value,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1._units = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1__units,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1.__imul__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1___imul__,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1.__idiv__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1___idiv__,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1.convert = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1_convert,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1.convert_wave = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1_convert_wave,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1._v_rows = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1__v_rows,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1._v_cols = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1__v_cols,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1._v_depth = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1__v_depth,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1.__str__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_1___str__,None,ArrayWithUnit_double_1)
ArrayWithUnit_double_1_swigregister = _array_with_unit.ArrayWithUnit_double_1_swigregister
ArrayWithUnit_double_1_swigregister(ArrayWithUnit_double_1)

class ArrayWithUnit_double_2(full_physics_swig.generic_object.GenericObject):
    """
    We frequently have a array of numbers with units associated with them.

    This is a simple structure that just keeps these two things together.

    C++ includes: array_with_unit.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        FullPhysics::ArrayWithUnit< T, D >::ArrayWithUnit(const blitz::Array< T, D > &Value, const std::string
        &Value_units_name)

        """
        _array_with_unit.ArrayWithUnit_double_2_swiginit(self,_array_with_unit.new_ArrayWithUnit_double_2(*args))
    def convert(self, *args):
        """
        ArrayWithUnit<T, D> FullPhysics::ArrayWithUnit< T, D >::convert(const Unit &R) const
        Convert to the given units. 
        """
        return _array_with_unit.ArrayWithUnit_double_2_convert(self, *args)

    def convert_wave(self, *args):
        """
        ArrayWithUnit<T,D> FullPhysics::ArrayWithUnit< T, D >::convert_wave(const Unit &R) const
        We often need to handle conversion from wavenumber to/from wavelength.

        This is either a normal conversion of the units before and after match
        in the power of length (so cm^-1 to m^-1), or do an inversion. Since
        we do this often enough, it is worth having a function that handles
        this logic. 
        """
        return _array_with_unit.ArrayWithUnit_double_2_convert_wave(self, *args)

    def _v_rows(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::rows() const

        """
        return _array_with_unit.ArrayWithUnit_double_2__v_rows(self)

    @property
    def rows(self):
        return self._v_rows()

    def _v_cols(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::cols() const

        """
        return _array_with_unit.ArrayWithUnit_double_2__v_cols(self)

    @property
    def cols(self):
        return self._v_cols()

    def _v_depth(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::depth() const

        """
        return _array_with_unit.ArrayWithUnit_double_2__v_depth(self)

    @property
    def depth(self):
        return self._v_depth()

    @property
    def value(self):    
      return self._value()

    @value.setter
    def value(self,v):
      self._value(v)

    @property
    def units(self):    
      return self._units()

    @units.setter
    def units(self,v):
      self._units(v)
      
    __swig_destroy__ = _array_with_unit.delete_ArrayWithUnit_double_2
ArrayWithUnit_double_2._value = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2__value,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2._units = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2__units,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2.__imul__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2___imul__,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2.__idiv__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2___idiv__,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2.convert = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2_convert,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2.convert_wave = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2_convert_wave,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2._v_rows = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2__v_rows,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2._v_cols = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2__v_cols,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2._v_depth = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2__v_depth,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2.__str__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_2___str__,None,ArrayWithUnit_double_2)
ArrayWithUnit_double_2_swigregister = _array_with_unit.ArrayWithUnit_double_2_swigregister
ArrayWithUnit_double_2_swigregister(ArrayWithUnit_double_2)

class ArrayWithUnit_double_3(full_physics_swig.generic_object.GenericObject):
    """
    We frequently have a array of numbers with units associated with them.

    This is a simple structure that just keeps these two things together.

    C++ includes: array_with_unit.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        FullPhysics::ArrayWithUnit< T, D >::ArrayWithUnit(const blitz::Array< T, D > &Value, const std::string
        &Value_units_name)

        """
        _array_with_unit.ArrayWithUnit_double_3_swiginit(self,_array_with_unit.new_ArrayWithUnit_double_3(*args))
    def convert(self, *args):
        """
        ArrayWithUnit<T, D> FullPhysics::ArrayWithUnit< T, D >::convert(const Unit &R) const
        Convert to the given units. 
        """
        return _array_with_unit.ArrayWithUnit_double_3_convert(self, *args)

    def convert_wave(self, *args):
        """
        ArrayWithUnit<T,D> FullPhysics::ArrayWithUnit< T, D >::convert_wave(const Unit &R) const
        We often need to handle conversion from wavenumber to/from wavelength.

        This is either a normal conversion of the units before and after match
        in the power of length (so cm^-1 to m^-1), or do an inversion. Since
        we do this often enough, it is worth having a function that handles
        this logic. 
        """
        return _array_with_unit.ArrayWithUnit_double_3_convert_wave(self, *args)

    def _v_rows(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::rows() const

        """
        return _array_with_unit.ArrayWithUnit_double_3__v_rows(self)

    @property
    def rows(self):
        return self._v_rows()

    def _v_cols(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::cols() const

        """
        return _array_with_unit.ArrayWithUnit_double_3__v_cols(self)

    @property
    def cols(self):
        return self._v_cols()

    def _v_depth(self):
        """
        int FullPhysics::ArrayWithUnit< T, D >::depth() const

        """
        return _array_with_unit.ArrayWithUnit_double_3__v_depth(self)

    @property
    def depth(self):
        return self._v_depth()

    @property
    def value(self):    
      return self._value()

    @value.setter
    def value(self,v):
      self._value(v)

    @property
    def units(self):    
      return self._units()

    @units.setter
    def units(self,v):
      self._units(v)
      
    __swig_destroy__ = _array_with_unit.delete_ArrayWithUnit_double_3
ArrayWithUnit_double_3._value = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3__value,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3._units = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3__units,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3.__imul__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3___imul__,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3.__idiv__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3___idiv__,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3.convert = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3_convert,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3.convert_wave = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3_convert_wave,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3._v_rows = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3__v_rows,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3._v_cols = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3__v_cols,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3._v_depth = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3__v_depth,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3.__str__ = new_instancemethod(_array_with_unit.ArrayWithUnit_double_3___str__,None,ArrayWithUnit_double_3)
ArrayWithUnit_double_3_swigregister = _array_with_unit.ArrayWithUnit_double_3_swigregister
ArrayWithUnit_double_3_swigregister(ArrayWithUnit_double_3)



