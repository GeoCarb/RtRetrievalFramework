# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _ground_lambertian.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ground_lambertian', [dirname(__file__)])
        except ImportError:
            import _ground_lambertian
            return _ground_lambertian
        if fp is not None:
            try:
                _mod = imp.load_module('_ground_lambertian', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ground_lambertian = swig_import_helper()
    del swig_import_helper
else:
    import _ground_lambertian
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _ground_lambertian.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.ground
import full_physics_swig.observer
import full_physics_swig.generic_object
import full_physics_swig.sub_state_vector_array
class GroundLambertian(object):
    """
    This class implements a Lambertian albedo as a ground type.

    C++ includes: ground_lambertian.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        GroundLambertian::GroundLambertian(const blitz::Array< double, 2 > &Spec_coeffs, const blitz::Array<
        bool, 2 > &Flag, const ArrayWithUnit< double, 1 > &Ref_points, const
        std::vector< std::string > &Desc_band_names)

        """
        _ground_lambertian.GroundLambertian_swiginit(self,_ground_lambertian.new_GroundLambertian(*args))
    def surface_parameter(self, *args):
        """
        ArrayAd< double, 1 > GroundLambertian::surface_parameter(const double wn, const int spec_index) const

        """
        return _ground_lambertian.GroundLambertian_surface_parameter(self, *args)

    def albedo(self, *args):
        """
        const AutoDerivative< double > GroundLambertian::albedo(const DoubleWithUnit wave_point, const int spec_index) const

        """
        return _ground_lambertian.GroundLambertian_albedo(self, *args)

    def number_spectrometer(self):
        """
        virtual const int FullPhysics::GroundLambertian::number_spectrometer() const

        """
        return _ground_lambertian.GroundLambertian_number_spectrometer(self)

    def number_params(self):
        """
        virtual const int FullPhysics::GroundLambertian::number_params() const

        """
        return _ground_lambertian.GroundLambertian_number_params(self)

    def albedo_coefficients(self, *args):
        """
        const ArrayAd< double, 1 > GroundLambertian::albedo_coefficients(const int spec_index) const

        """
        return _ground_lambertian.GroundLambertian_albedo_coefficients(self, *args)

    def albedo_covariance(self, *args):
        """
        const blitz::Array< double, 2 > GroundLambertian::albedo_covariance(const int spec_index) const

        """
        return _ground_lambertian.GroundLambertian_albedo_covariance(self, *args)

    def reference_point(self, *args):
        """
        virtual const DoubleWithUnit FullPhysics::GroundLambertian::reference_point(const int spec_index) const
        Center wavelength that spectrally dependent parameter is referenced
        to. 
        """
        return _ground_lambertian.GroundLambertian_reference_point(self, *args)

    def clone(self):
        """
        boost::shared_ptr< Ground > GroundLambertian::clone() const

        """
        return _ground_lambertian.GroundLambertian_clone(self)

    def state_vector_name_i(self, *args):
        """
        std::string GroundLambertian::state_vector_name_i(int i) const

        """
        return _ground_lambertian.GroundLambertian_state_vector_name_i(self, *args)

    def print_desc(self, *args):
        """
        void GroundLambertian::print(std::ostream &Os) const

        """
        return _ground_lambertian.GroundLambertian_print_desc(self, *args)

    def desc(self):
        """
        virtual std::string FullPhysics::GroundLambertian::desc() const

        """
        return _ground_lambertian.GroundLambertian_desc(self)

    __swig_destroy__ = _ground_lambertian.delete_GroundLambertian
GroundLambertian.surface_parameter = new_instancemethod(_ground_lambertian.GroundLambertian_surface_parameter,None,GroundLambertian)
GroundLambertian.albedo = new_instancemethod(_ground_lambertian.GroundLambertian_albedo,None,GroundLambertian)
GroundLambertian.number_spectrometer = new_instancemethod(_ground_lambertian.GroundLambertian_number_spectrometer,None,GroundLambertian)
GroundLambertian.number_params = new_instancemethod(_ground_lambertian.GroundLambertian_number_params,None,GroundLambertian)
GroundLambertian.albedo_coefficients = new_instancemethod(_ground_lambertian.GroundLambertian_albedo_coefficients,None,GroundLambertian)
GroundLambertian.albedo_covariance = new_instancemethod(_ground_lambertian.GroundLambertian_albedo_covariance,None,GroundLambertian)
GroundLambertian.reference_point = new_instancemethod(_ground_lambertian.GroundLambertian_reference_point,None,GroundLambertian)
GroundLambertian.clone = new_instancemethod(_ground_lambertian.GroundLambertian_clone,None,GroundLambertian)
GroundLambertian.state_vector_name_i = new_instancemethod(_ground_lambertian.GroundLambertian_state_vector_name_i,None,GroundLambertian)
GroundLambertian.print_desc = new_instancemethod(_ground_lambertian.GroundLambertian_print_desc,None,GroundLambertian)
GroundLambertian.desc = new_instancemethod(_ground_lambertian.GroundLambertian_desc,None,GroundLambertian)
GroundLambertian_swigregister = _ground_lambertian.GroundLambertian_swigregister
GroundLambertian_swigregister(GroundLambertian)



