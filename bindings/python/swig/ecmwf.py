# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.7
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (3, 0, 0):
    new_instancemethod = lambda func, inst, cls: _ecmwf.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ecmwf', [dirname(__file__)])
        except ImportError:
            import _ecmwf
            return _ecmwf
        if fp is not None:
            try:
                _mod = imp.load_module('_ecmwf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ecmwf = swig_import_helper()
    del swig_import_helper
else:
    import _ecmwf
del version_info
try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.


def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        object.__setattr__(self, name, value)
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr_nondynamic(self, class_type, name, static=1):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    if (not static):
        return object.__getattr__(self, name)
    else:
        raise AttributeError(name)

def _swig_getattr(self, class_type, name):
    return _swig_getattr_nondynamic(self, class_type, name, 0)


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object:
        pass
    _newclass = 0



def _swig_setattr_nondynamic_method(set):
    def set_attr(self, name, value):
        if (name == "thisown"):
            return self.this.own(value)
        if hasattr(self, name) or (name == "this"):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x



_ecmwf.SHARED_PTR_DISOWN_swigconstant(_ecmwf)
SHARED_PTR_DISOWN = _ecmwf.SHARED_PTR_DISOWN

def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.meteorology
import full_physics_swig.generic_object
class Ecmwf(full_physics_swig.meteorology.Meteorology):
    """

    This class is used to read some of the fields from the ECMWF file,
    which can then be used for things such as the apriori.

    Since resampled ECMWF files can differ between instrument types, the
    read routines are pure virtual and need to be implemented for the
    specifics of the instrument specific ECMWF files.

    C++ includes: ecmwf.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _ecmwf.delete_Ecmwf

    def _v_h2o_vmr(self):
        """

        blitz::Array< double, 1 > Ecmwf::h2o_vmr() const
        Return the H20 VMR.

        This is the specific_humidity converted to a volume mixing ratio. 
        """
        return _ecmwf.Ecmwf__v_h2o_vmr(self)


    @property
    def h2o_vmr(self):
        return self._v_h2o_vmr()


    def _v_ozone_mmr(self):
        """

        virtual blitz::Array<double, 1> FullPhysics::Ecmwf::ozone_mmr() const =0
        Ozone mass mixing ratio. 
        """
        return _ecmwf.Ecmwf__v_ozone_mmr(self)


    @property
    def ozone_mmr(self):
        return self._v_ozone_mmr()


    def _v_ozone_vmr(self):
        """

        blitz::Array< double, 1 > Ecmwf::ozone_vmr() const
        Return the Ozone VMR. 
        """
        return _ecmwf.Ecmwf__v_ozone_vmr(self)


    @property
    def ozone_vmr(self):
        return self._v_ozone_vmr()

Ecmwf._v_h2o_vmr = new_instancemethod(_ecmwf.Ecmwf__v_h2o_vmr, None, Ecmwf)
Ecmwf._v_ozone_mmr = new_instancemethod(_ecmwf.Ecmwf__v_ozone_mmr, None, Ecmwf)
Ecmwf._v_ozone_vmr = new_instancemethod(_ecmwf.Ecmwf__v_ozone_vmr, None, Ecmwf)
Ecmwf.__str__ = new_instancemethod(_ecmwf.Ecmwf___str__, None, Ecmwf)
Ecmwf_swigregister = _ecmwf.Ecmwf_swigregister
Ecmwf_swigregister(Ecmwf)



