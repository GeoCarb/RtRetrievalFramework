# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (3,0,0):
    new_instancemethod = lambda func, inst, cls: _oco_sim_met_ecmwf.SWIG_PyInstanceMethod_New(func)
else:
    from new import instancemethod as new_instancemethod
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_oco_sim_met_ecmwf', [dirname(__file__)])
        except ImportError:
            import _oco_sim_met_ecmwf
            return _oco_sim_met_ecmwf
        if fp is not None:
            try:
                _mod = imp.load_module('_oco_sim_met_ecmwf', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _oco_sim_met_ecmwf = swig_import_helper()
    del swig_import_helper
else:
    import _oco_sim_met_ecmwf
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


SHARED_PTR_DISOWN = _oco_sim_met_ecmwf.SHARED_PTR_DISOWN
def _new_from_init(cls, version, *args):
    '''For use with pickle, covers common case where we just store the
    arguments needed to create an object. See for example HdfFile'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__(*args)
    return inst

def _new_from_set(cls, version, *args):
    '''For use with pickle, covers common case where we use a set function 
    to assign the value'''
    if(cls.pickle_format_version() != version):
      raise RuntimeException("Class is expecting a pickled object with version number %d, but we found %d" % (cls.pickle_format_version(), version))
    inst = cls.__new__(cls)
    inst.__init__()
    inst.set(*args)
    return inst

import full_physics_swig.ecmwf
import full_physics_swig.generic_object
class OcoSimMetEcmwf(full_physics_swig.ecmwf.Ecmwf):
    """
    This class implements the OCO specific ECMWF reading functionality.

    This reads the simulator meteorology files. This are similar to the
    OCO ECMWF, but the fields have different names.

    Note that the actual OCO simulator used "scene" files, which are
    somewhat lime the meteorology but in a different format, and with a
    different number of levels (not the normal 91 ECMWF). The meteorology
    files are this scene information resampled to the 91 levels.

    C++ includes: oco_sim_met_ecmwf.h 
    """
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    __swig_destroy__ = _oco_sim_met_ecmwf.delete_OcoSimMetEcmwf
    def __init__(self, *args): 
        """
        OcoSimMetEcmwf::OcoSimMetEcmwf(const std::string &Fname, const boost::shared_ptr< HdfSoundingId >
        &Hdf_sounding_id)
        Constructor.

        Parameters:
        -----------

        Fname:  File to open

        Hdf_sounding_id:  The sounding id to read in the file. and pressure as
        the average value for all the sounding numbers. 
        """
        _oco_sim_met_ecmwf.OcoSimMetEcmwf_swiginit(self,_oco_sim_met_ecmwf.new_OcoSimMetEcmwf(*args))
OcoSimMetEcmwf_swigregister = _oco_sim_met_ecmwf.OcoSimMetEcmwf_swigregister
OcoSimMetEcmwf_swigregister(OcoSimMetEcmwf)



